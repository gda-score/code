# Author: Rohan
# Date: 12-11-2018

""" server.py listens for incoming requests from the client and extracts the parameters from the url sent by the client.
It then writes the extracted parameters to a file in JSON format and sends the extracted file back to the client.
"""

import fnmatch
import glob
import json
import os
import time

from flask import Flask, request, session
from flask_restful import Api, Resource

app = Flask(__name__)
api = Api(app)

# Variable to store the result file count in Uber Tool directory
file_count = 0

# Variable to store the query result generated by Uber Tool
query_result = []

# Secret key for each session
app.secret_key = os.urandom(25)


# Method to read .txt files generated by Uber Tool
def read_file():
    global file_count
    global query_result
    # <Give path to Uber directory here>
    path = "<path>\\sql-differential-privacy\\"
    temp_file_count = len(fnmatch.filter(os.listdir(path), '*.txt'))
    if (file_count != temp_file_count):
        file_count = temp_file_count
        list_of_files = glob.iglob(path + '*.txt')
        latest_file = max(list_of_files, key=os.path.getctime)
        print("\nLast modified file: " + latest_file)
        with open(latest_file, "r") as myfile:
            query_result = myfile.readlines()
            return query_result


# Method to write url parameters in JSON to a file
def write_file(response):
    global query_result
    time_stamp = str(time.strftime("%Y-%m-%d_%H-%M-%S"))  # timeStamp stores current data and time to append to filename
    with open('data' + time_stamp + '.json', 'w') as outfile:
        json.dump(response, outfile)
    print("\nJSON File created!")
    # Calls read_file method continuously to check if query_result value has changed
    while True:

        qr = read_file()  # Store the returned query_result
        time.sleep(5)

        if qr is not None:  # Check if query result value is not None
            return qr  # Return the query result to get method


""" Server method to handle incoming data.
Calls writeFile method to write the url parameters in JSON to a file.
Returns the same parameters as response to client.
"""


# Method to intialize used_budget
def set_used_budget():
    session['used_budget'] = 0.0
    print('New session started!')


class GetParams(Resource):
    def get(self):

        client_request = json.loads(list(dict(request.args).keys())[0])  # Stores the request in JSON format
        budget = client_request['budget']
        epsilon = client_request['epsilon']
        print("JSON sent by Client: " + str(client_request))
        used_budget = session.get('used_budget')  # used_budget used a session variable

        # If Client sends the first request then initialize used_budget to 0.0
        if used_budget == None:
            set_used_budget()

        used_budget = session.get('used_budget') # Variable to store the used_budget on per session basis

        # Check if client has budget for sending queries for a session
        if (used_budget < float(budget)):
            session['used_budget'] += float(epsilon)
            result = write_file(client_request)  # Write request to file and store the returned query result
            print(used_budget)
            return result  # Return the query result to the client
        else:
            error_message = "Budget exceeded - Cannot process queries"
            return error_message


api.add_resource(GetParams, '/data')  # Route for get()

if __name__ == '__main__':
    app.run(port='5890', threaded=True)
