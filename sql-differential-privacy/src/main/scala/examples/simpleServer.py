# Author: Rohan
# Date: 12-11-2018

""" server.py listens for incoming requests from the client and extracts the parameters from the url sent by the client.
It then writes the extracted parameters to a file in JSON format and sends the extracted file back to the client.
"""

import fnmatch
import glob
import json
import os
import time

from flask import Flask, request
from flask_restful import Resource, Api

app = Flask(__name__)
api = Api(app)

# Variable to store the result file count in Uber Tool directory
fileCount = 0

# Variable to store the query result generated by Uber Tool
queryResult = []


# Method to read .txt files generated by Uber Tool
def readFile():
    global fileCount
    global queryResult
    # <Give path to Uber directory here>
    path = "<Give path to Uber directory here>\\sql-differential-privacy\\"
    tempFileCount = len(fnmatch.filter(os.listdir(path), '*.txt'))
    if (fileCount != tempFileCount):
        fileCount = tempFileCount
        list_of_files = glob.iglob(path + '*.txt')
        latest_file = max(list_of_files, key=os.path.getctime)
        print("\nLast modified file: " + latest_file)
        with open(latest_file, "r") as myfile:
            queryResult = myfile.readlines()
            return queryResult


# Method to write url parameters in JSON to a file
def write_file(response):
    global queryResult
    time_stamp = str(time.strftime("%Y-%m-%d_%H-%M-%S"))  # timeStamp stores current data and time to append to filename
    with open('data' + time_stamp + '.json', 'w') as outfile:
        json.dump(response, outfile)
    print("JSON File created!")
    # Calls readFile method continuously to check if queryResult value has changed
    while True:

        qr = readFile()  # Store the returned queryResult
        time.sleep(5)

        if qr is not None:  # Check if query result value is not None
            return qr  # Return the query result to get method


""" Server method to handle incoming data.
Calls writeFile method to write the url parameters in JSON to a file.
Returns the same parameters as response to client.
"""


class GetParams(Resource):
    def get(self):
        clientRequest = json.loads(list(dict(request.args).keys())[0])  # Stores the request in JSON format
        result = write_file(clientRequest)  # Write request to file and store the returned query result
        return result  # Return the query result to the client


api.add_resource(GetParams, '/data')  # Route for GetJSON()

if __name__ == '__main__':
    app.run(port='5890', threaded=True)
